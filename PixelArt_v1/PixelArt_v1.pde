/*
Author: Sebastian G. Botasi
Date: 2011
Description: Application designed for use with Processing.js (http://bionimio.com.ar/index.php?idT=bioPixel), 
the same color pixels to load and display an image forming randomly and without repetition.
*/

color[] colores = {
  -3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-16734564,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-6710887,-6710887,-6710887,-6710887,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-5000269,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-10066330,-10066330,-10066330,-10066330,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444,-3355444
};

Punto[] pixeles;

int widthRedimencionado = 30;
int heightRedimencionado = 30;

int ancho = 800;
int alto = 600;

color fondo = #FCFCFC;

int anchoIMG = 500;
int altoIMG = 476;

float tamanoPixelX = round(anchoIMG/widthRedimencionado);
float tamanoPixelY = round(altoIMG/heightRedimencionado);

int[] variable;

int cont = 0;
int cabezal = 0;
int totalMax = 1;
int quePixel = 0;

int posXINI = 0;
int posYINI = 0;

void setup() {

  size(ancho, alto);
  posXINI = (ancho/2) - (anchoIMG/2);
  posYINI = (alto/2) - (altoIMG/2);
  cargarBuffer();
  background(fondo);
}

void cargarBuffer() {
  pixeles = new Punto[0];
  int sumatoria = 0;
  for (int i=0;i<=widthRedimencionado-1;i++) {
    for (int j=0;j<=heightRedimencionado-1;j++) {
      if ((colores[sumatoria] != -3355444) && (colores[sumatoria] != -5000269) && (colores[sumatoria] != -6710887) && (colores[sumatoria] != -2500135)) {
        pixeles = (Punto[])append(pixeles, new Punto(posXINI+i*tamanoPixelX, posYINI+j*tamanoPixelY, tamanoPixelX, tamanoPixelY,colores[sumatoria] ));
      }
      sumatoria++;
    }
  }
  variable = aleatoriosSinRepetir(pixeles.length);
}

void mousePressed() {
  cont = 0;
  cabezal = 0;
  totalMax = 1;
  quePixel = 0;
  cargarBuffer();
  background(fondo);
}

void draw() {
  cont++;
  if (cont == totalMax) {
    pixeles[variable[cabezal]].dibujo();
    cabezal++;

    if (cabezal == variable.length) {
      cabezal = 0;
    }
    cont=0;
  }
}


class Punto {
  float x, y, ancho, alto;
  color relleno;
  Punto(float x_, float y_, float ancho_, float alto_, color relleno_) {
    x = x_;
    y = y_;
    ancho = ancho_;
    alto = alto_;
    relleno = relleno_;
  }

  void dibujo() {
    fill(relleno);
    noStroke();
    rect(x, y, ancho, alto);
  }
}





//funciones
int[] aleatoriosSinRepetir(int cantidad_) {
  int[] myArray = new int[cantidad_];

  for (int i = 0; i < cantidad_; ++i) {
    int num = 0;
    boolean isUnique = false;
    while (!isUnique) {
      num = int(random(cantidad_));
      isUnique = true;
      for (int j = 0; j < i; ++j) {
        if (num==myArray[j]) {
          isUnique = false;
        }
      }
    }
    myArray[i] = num;
  }

  return myArray;
}

